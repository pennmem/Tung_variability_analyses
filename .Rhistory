temp = data.frame()
recall_prob = list_result[[ix[i]]]$recall_prob
temp = data.frame(recall = recall_prob , number = rep(i,length(recall_prob)))
session_frame = rbind(session_frame, temp)
}
p = ggplot(session_frame, aes(x = number, y = recall))
p = p + geom_point() + theme_bw() + ylim(c(0,1))
#p = p + geom_hline(yintercept = 0, linetype = 'dashed')
p = p + theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
p = p + theme(text = element_text(size=15),
axis.text.x = element_text(angle=0, hjust=1))
p = p + xlab('Subject Number') + ylab("Predicted Recall")
ggsave('residual_variablity_session.pdf', plot = p, device = NULL, path = NULL,
scale = 1, dpi = 500, width = 10, height = 10, units = "cm")
r_vec_sort = r_vec[ix]
r_frame = data.frame(r = r_vec_sort, number = 1:length(r_vec_sort))
r_frame$r = 100*r_frame$r
p = ggplot(r_frame, aes(x = number, y = r))
p = p + geom_point() + theme_bw() + ylim(c(0,30))
p = p + geom_hline(yintercept = mean(r_frame$r), linetype = 'dashed')
p = p + theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
p = p + theme(text = element_text(size=15),
axis.text.x = element_text(angle=0, hjust=1))
p = p + xlab('Subject Number') + ylab("Percent Reduction")
ggsave('percent_reduction_session.pdf', plot = p, device = NULL, path = NULL,
scale = 1, dpi = 500, width = 10, height = 10, units = "cm")
r_frame
r_frame$r
mean(r_frame$r )
sd(r_frame$r )
range(r_frame$r)
coefs =coef(model_list)$subject
names(coefs)[9] = 'Session'
names(coefs)[2:5] = c("Mon", "Thu", "Tue", "Wed")
plot_model(coefs[c('Alertness', 'Session', 'Sleep', 'Time')], 10, 10, 'intersession_vars.pdf')
plot_model(coefs[c('Mon', 'Thu', 'Tue', 'Wed')], 10, 10, 'intersession_var_Day.pdf')
coeffs = as.data.frame(summary(model_session)$coefficients)
coeffs['p'] = 2*(1 - pnorm(abs(coeffs[,3])))
xtable(coeffs[,1:2], digits = 3)
residuals = resid(model_session)  # get residuals from each model
subjects = unique(ltpfr2_prob[['subject']])
r_vec = length(subjects)
list_result = list()
for(i in 1:length(subjects))
{
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, Sess)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
list_result[i] = list(recall = recall_prob, r = r)
}
means = sapply(list_result, function(x){mean(x$recall)})
sort_result = sort(means, index.return = TRUE)
ix = sort_result$ix
session_frame = data.frame()
for(i in 1:length(ix))
{
temp = data.frame()
recall_prob = list_result[[ix[i]]]$recall_prob
temp = data.frame(recall = recall_prob , number = rep(i,length(recall_prob)))
session_frame = rbind(session_frame, temp)
}
session_frame = data.frame()
for(i in 1:length(ix))
{
temp = data.frame()
recall_prob = list_result[[ix[i]]]$recall_prob
temp = data.frame(recall = recall_prob , number = rep(i,length(recall_prob)))
session_frame = rbind(session_frame, temp)
}
p = ggplot(session_frame, aes(x = number, y = recall))
p = p + geom_point() + theme_bw() + ylim(c(0,1))
#p = p + geom_hline(yintercept = 0, linetype = 'dashed')
p = p + theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
p = p + theme(text = element_text(size=15),
axis.text.x = element_text(angle=0, hjust=1))
p = p + xlab('Subject Number') + ylab("Predicted Recall")
ggsave('residual_variablity_session.pdf', plot = p, device = NULL, path = NULL,
scale = 1, dpi = 500, width = 10, height = 10, units = "cm")
r_vec_sort = r_vec[ix]
r_frame = data.frame(r = r_vec_sort, number = 1:length(r_vec_sort))
r_frame$r = 100*r_frame$r
mean(r_frame$r)
residuals = resid(model_session)  # get residuals from each model
subjects = unique(ltpfr2_prob[['subject']])
r_vec = length(subjects)
list_result = list()
for(i in 1:length(subjects))
{
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, Sess)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
list_result[i] = list(recall = recall_prob, r = r)
}
means = sapply(list_result, function(x){mean(x$recall)})
sort_result = sort(means, index.return = TRUE)
ix = sort_result$ix
session_frame = data.frame()
for(i in 1:length(ix))
{
temp = data.frame()
recall_prob = list_result[[ix[i]]]$recall_prob
temp = data.frame(recall = recall_prob , number = rep(i,length(recall_prob)))
session_frame = rbind(session_frame, temp)
}
p = ggplot(session_frame, aes(x = number, y = recall))
p = p + geom_point() + theme_bw() + ylim(c(0,1))
#p = p + geom_hline(yintercept = 0, linetype = 'dashed')
p = p + theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
p = p + theme(text = element_text(size=15),
axis.text.x = element_text(angle=0, hjust=1))
p = p + xlab('Subject Number') + ylab("Predicted Recall")
ggsave('residual_variablity_session.pdf', plot = p, device = NULL, path = NULL,
scale = 1, dpi = 500, width = 10, height = 10, units = "cm")
r_vec_sort = r_vec[ix]
r_frame = data.frame(r = r_vec_sort, number = 1:length(r_vec_sort))
r_frame$r = 100*r_frame$r
mean(r_frame$r)
sd(r_frame$r)
residuals = resid(model_list)  # get residuals from each model
subjects = unique(ltpfr2_prob[['subject']])
r_vec = length(subjects)
list_result = list()
for(i in 1:length(subjects))
{
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, List)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
list_result[i] = list(recall = recall_prob, r = r)
}
means = sapply(list_result, function(x){mean(x$recall)})
sort_result = sort(means, index.return = TRUE)
ix = sort_result$ix
session_frame = data.frame()
for(i in 1:length(ix))
{
temp = data.frame()
recall_prob = list_result[[ix[i]]]$recall_prob
temp = data.frame(recall = recall_prob , number = rep(i,length(recall_prob)))
session_frame = rbind(session_frame, temp)
}
p = ggplot(session_frame, aes(x = number, y = recall))
p = p + geom_point() + theme_bw() + ylim(c(0,1))
#p = p + geom_hline(yintercept = 0, linetype = 'dashed')
p = p + theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
p = p + theme(text = element_text(size=15),
axis.text.x = element_text(angle=0, hjust=1))
p = p + xlab('Subject Number') + ylab("Predicted Recall")
ggsave('residual_variablity_list.pdf', plot = p, device = NULL, path = NULL,
scale = 1, dpi = 500, width = 10, height = 10, units = "cm")
r_vec_sort = r_vec[ix]
r_frame = data.frame(r = r_vec_sort, number = 1:length(r_vec_sort))
r_frame$r = 100*r_frame$r
mean(r_frame$r)
sd(r_frame$r)
range(r_frame$r)
r_frame
min(r_frame$r)
max(r_frame$r)
ltpfr2_prob = fread('ltpfr2_prob.csv')
ltpfr2_prob = as.data.frame(ltpfr2_prob)
ltpfr2_prob['Sleep'] = scale(ltpfr2_prob['Sleep'])
ltpfr2_prob['Alertness'] = scale(ltpfr2_prob['Alertness'] + rnorm(length(ltpfr2_prob[['Alertness']]),0,0.05))
ltpfr2_prob['Sess'] = ltpfr2_prob['session']
ltpfr2_prob['session'] = scale(ltpfr2_prob['session'] + 1)
#ltpfr2_prob['list'] = factor(ltpfr2_prob[['list']])
ltpfr2_prob['recalled'] = logit(ltpfr2_prob[['recalled']])
ltpfr2_prob['Time'] = scale(assign_time(ltpfr2_prob[['Time']]))
ltpfr2_prob['Block'] = scale(assign_block(ltpfr2_prob[['list']]))
ltpfr2_prob['List'] = factor(ltpfr2_prob[['list']])
ltpfr2_prob['list'] = factor(assign_list(ltpfr2_prob[['list']]))
residuals = resid(model_list)  # get residuals from each model
subjects = unique(ltpfr2_prob[['subject']])
r_vec = length(subjects)
list_result = list()
ltpfr2_prob['lsit']
ltpfr2_prob['List']
ltpfr2_prob['list']
indices_auto = which( (2 < =data[['list']]) && (data[['list']] <=8) )
indices_auto = which( (2 <= data[['list']]) && (data[['list']] <=8) )
indices_auto = which( (2 <= data[["list"]]) && (data[["list"]] <=8) )
indices_auto = which( (2 <= subject_data[["list"]]) && (subject_data[["list"]] <=8) )
ltpfr2_prob['List'] = as.integer(ltpfr2_prob[['list']])
indices_auto = which( (2 <= subject_data[["list"]]) && (subject_data[["list"]] <=8) )
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, List)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
indices_auto = which( (2 <= subject_data[["list"]]) && (subject_data[["list"]] <=8) )
ltpfr2_prob['list'] = as.integer(assign_list(ltpfr2_prob[['list']]))
ltpfr2_prob['list'] = as.integer(assign_list(ltpfr2_prob[['list']]))
indices_auto = which( (2 <= subject_data[["list"]]) && (subject_data[["list"]] <=8) )
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, List)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
list_result[i] = list(recall = recall_prob, r = r)
indices_auto = which( (2 <= subject_data[["list"]]) && (subject_data[["list"]] <=8) )
indices_auto
subject_data["list"]
2 <-subject_data["list"]
2 <= subject_data["list"]
indices_auto = which( (2 <= subject_data[["list"]]) & (subject_data[["list"]] <=8) )
indices_auto
indices_lagged = which((1 <= subject_data[["list"]]) & (subject_data[["list"]] <=7))
indices_lagged
auto_frame = data.frame()
auto_temp = data.frame(resid = residuals[indices_auto])
auto_temp = data.frame(resid = residuals[indices_auto], lagged = residuals[indices_lagged], prior_recall = subject_data['recalled'][indices_lagged])
auto_temp = data.frame(resid = residuals[indices_auto], lagged = residuals[indices_lagged])
auto_temp
subject_data[['reca;;ed']]
subject_data[['recaleldd']]
subject_data[['recalled']]
length(subject_data[['recalled']])
auto_temp = data.frame(resid = residuals[indices_auto], lagged = residuals[indices_lagged], prior_recall = subject_data[[indices_lagged,'recalled']])
auto_temp = data.frame(resid = residuals[indices_auto], lagged = residuals[indices_lagged], prior_recall = subject_data[indices_lagged,'recalled'])
auto_temp
subject_data['subject']
subject_data[['subject']]
subject_data[['subject']][1]
auto_temp = data.frame(resid = residuals[indices_auto], lagged = residuals[indices_lagged], prior_recall = subject_data[indices_lagged,'recalled'], subject = subject_data[['subject']][1])
auto_temp
auto_frame = data.frame()
for(i in 1:length(subjects))
{
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, List)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
list_result[i] = list(recall = recall_prob, r = r)
indices_auto = which((2 <= subject_data[["list"]]) & (subject_data[["list"]] <=8) )
indices_lagged = which((1 <= subject_data[["list"]]) & (subject_data[["list"]] <=7))
auto_temp = data.frame(resid = residuals[indices_auto], lagged = residuals[indices_lagged], prior_recall = subject_data[indices_lagged,'recalled'], subject = subject_data[['subject']][1])
auto_frame = rbind(auto_frame, auto_temp)
}
i
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, List)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
list_result[i] = list(recall = recall_prob, r = r)
auto_frame = data.frame()
for(i in 1:length(subjects))
{
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, List)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
#list_result[i] = list(recall = recall_prob, r = r)
indices_auto = which((2 <= subject_data[["list"]]) & (subject_data[["list"]] <=8) )
indices_lagged = which((1 <= subject_data[["list"]]) & (subject_data[["list"]] <=7))
auto_temp = data.frame(resid = residuals[indices_auto], lagged = residuals[indices_lagged], prior_recall = subject_data[indices_lagged,'recalled'], subject = subject_data[['subject']][1])
auto_frame = rbind(auto_frame, auto_temp)
}
# autocorrelation analysis
i
auto_frame = data.frame()
for(i in 1:length(subjects))
{
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, List)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
list_result[i] = list(recall = recall_prob, r = r)
indices_auto = which((2 <= subject_data[["list"]]) & (subject_data[["list"]] <=8) )
indices_lagged = which((1 <= subject_data[["list"]]) & (subject_data[["list"]] <=7))
auto_temp = data.frame(resid = residuals[indices_auto], lagged = residuals[indices_lagged], prior_recall = subject_data[indices_lagged,'recalled'], subject = subject_data[['subject']][1])
auto_frame = rbind(auto_frame, auto_temp)
}
indices_auto = which((2 <= subject_data[["list"]]) & (subject_data[["list"]] <=8) )
indices_auto
length(indices_auto)
indices_lagged = which((1 <= subject_data[["list"]]) & (subject_data[["list"]] <=7))
indices_lagged
length(indices_lagged)
indices_auto = which((2 <= subject_data[["list"]]) & (subject_data[["list"]] <=8) )
indices_lagged = indices_auto-1
indices_lagged
auto_temp = data.frame(resid = residuals[indices_auto], lagged = residuals[indices_lagged], prior_recall = subject_data[indices_lagged,'recalled'], subject = subject_data[['subject']][1])
auto_frame = data.frame()
for(i in 1:length(subjects))
{
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, List)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
list_result[i] = list(recall = recall_prob, r = r)
indices_auto = which((2 <= subject_data[["list"]]) & (subject_data[["list"]] <=8) )
indices_lagged = indices_auto-1
auto_temp = data.frame(resid = residuals[indices_auto], lagged = residuals[indices_lagged], prior_recall = subject_data[indices_lagged,'recalled'], subject = subject_data[['subject']][1])
auto_frame = rbind(auto_frame, auto_temp)
}
warnings()
dim(auto_frame)
names(auto_frame )
auto_frame['subject'] = factor(auto_frame[['subject']])
names(auto_frame )
# autocorrelation analysis
model_resid = lmer(resid ~ (1 + lagged + prior_recalled | subject) + 1+ lagged + prior_recall, auto_frame)
# autocorrelation analysis
model_resid = lmer(resid ~ (1 + lagged + prior_recall | subject) + 1+ lagged + prior_recall, auto_frame)
summary(model_resid)
coeffs = as.data.frame(summary(model_resid)$coefficients)
coeffs['p'] = 2*(1 - pnorm(abs(coeffs[,3])))
coeffs
# autocorrelation analysis
model_resid = lmer(resid ~ (1 + lagged  | subject) + 1+ lagged + prior_recall, auto_frame)
coeffs = as.data.frame(summary(model_resid)$coefficients)
coeffs['p'] = 2*(1 - pnorm(abs(coeffs[,3])))
coeffs
# autocorrelation analysis
model_resid = lmer(resid ~ (1 + lagged  | subject) + 1+ lagged , auto_frame)
coeffs = as.data.frame(summary(model_resid)$coefficients)
coeffs['p'] = 2*(1 - pnorm(abs(coeffs[,3])))
coeffs
# autocorrelation analysis
model_resid = lmer(resid ~ (1 | subject) +  1+ lagged , auto_frame)
summary(model_resid)
auto_frame = data.frame()
for(i in 1:length(subjects))
{
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, List)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
list_result[i] = list(recall = recall_prob, r = r)
indices_auto = which((2 <= subject_data[["list"]]) & (subject_data[["list"]] <=8) )
indices_lagged = indices_auto-1
auto_temp = data.frame(resid = residuals[indices_auto], lagged = residuals[indices_lagged], prior_recall = subject_data[indices_lagged,'recalled'], subject = subject_data[['subject']][1])
auto_frame = rbind(auto_frame, auto_temp)
}
indices_auto = which((2 <= subject_data[["list"]]) & (subject_data[["list"]] <=8) )
indices_auto
indices_lagged
auto_frame = data.frame()
for(i in 1:length(subjects))
{
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, List)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
list_result[i] = list(recall = recall_prob, r = r)
indices_auto = which((2 <= subject_data[["list"]]) & (subject_data[["list"]] <=8) )
indices_lagged = indices_auto-1
auto_temp = data.frame(resid = residuals_subject[indices_auto], lagged = residuals[indices_lagged], prior_recall = subject_data[indices_lagged,'recalled'], subject = subject_data[['subject']][1])
auto_frame = rbind(auto_frame, auto_temp)
}
auto_frame['subject'] = factor(auto_frame[['subject']])
# autocorrelation analysis
model_resid = lmer(resid ~ (1 + lagged | subject) +  1+ lagged , auto_frame)
summary(model_resid)
auto_frame = data.frame()
for(i in 1:length(subjects))
{
subject = subjects[i]
indices = which((ltpfr2_prob[['subject']] == subject))
subject_data = ltpfr2_prob[indices,]
y = subject_data[['recalled']]
SST = sum((y - mean(y))^2)
residuals_subject = residuals[indices]
SSE = sum(residuals[indices]^2)
r = 1 - SSE/SST
r_vec[i] = r
predicted =inv.logit(residuals_subject + mean(y))
subject_data[['predicted']] = predicted
subject_data_group_by_Sess = group_by(subject_data, List)
recall_prob = summarise( subject_data_group_by_Sess, recall_prob = mean(predicted))
recall_prob = as.data.frame(recall_prob)
list_result[i] = list(recall = recall_prob, r = r)
indices_auto = which((2 <= subject_data[["list"]]) & (subject_data[["list"]] <=8) )
indices_lagged = indices_auto-1
auto_temp = data.frame(resid = residuals_subject[indices_auto], lagged = residuals_subject[indices_lagged], prior_recall = subject_data[indices_lagged,'recalled'], subject = subject_data[['subject']][1])
auto_frame = rbind(auto_frame, auto_temp)
}
auto_frame['subject'] = factor(auto_frame[['subject']])
# autocorrelation analysis
model_resid = lmer(resid ~ (1 + lagged | subject) +  1+ lagged , auto_frame)
summary(model_resid)
# autocorrelation analysis
model_resid = lmer(resid ~ (1 + lagged + prior_recall | subject) +  1+ lagged + prior_recall , auto_frame)
summary(model_resid)
# autocorrelation analysis
model_resid = lmer(resid ~ (1 + lagged | subject) +  1+ lagged , auto_frame)
summary(model_resid)
